#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда

#Область ПрограммныйИнтерфейс

// Определяет состав программного интерфейса для интеграции с конфигурацией.
//
// Параметры:
//   Настройки - Структура - Настройки интеграции этого объекта.
//       См. возвращаемое значение функции ПодключаемыеКоманды.НастройкиПодключаемыхОтчетовИОбработок().
//
Процедура ПриОпределенииНастроек(Настройки) Экспорт
	Настройки.ДобавитьКомандыПечати = Истина;
	Настройки.Размещение.Добавить(Метаданные.Документы._ДемоСчетНаОплатуПокупателю);
КонецПроцедуры

// Заполняет список команд печати.
//
// Параметры:
//   КомандыПечати - ТаблицаЗначений - состав полей см. в функции УправлениеПечатью.СоздатьКоллекциюКомандПечати.
//
Процедура ДобавитьКомандыПечати(КомандыПечати) Экспорт
	Команда = КомандыПечати.Добавить();
	Команда.Представление = НСтр("ru = 'Счет на оплату (из расширения)'");
	Команда.Идентификатор = "СчетВПФ";
	
	Команда = КомандыПечати.Добавить();
	Команда.Представление = НСтр("ru = 'Комплект документов (из расширения)'");
	Команда.Идентификатор = "СчетВПФ,СчетВПФ,ЗаказВПФ";
	
	Команда = КомандыПечати.Добавить();
	Команда.Представление = НСтр("ru = 'Гарантийное письмо (из расширения)'");
	Команда.Идентификатор = "ГарантийноеПисьмоВПФ";
КонецПроцедуры

// Формирует печатные формы.
//
// Параметры:
//   МассивОбъектов  - Массив    - Ссылки на объекты, которые нужно распечатать.
//   ПараметрыПечати - Структура - Дополнительные настройки печати.
//   КоллекцияПечатныхФорм - ТаблицаЗначений - сформированные табличные документы (выходной параметр).
//   ОбъектыПечати - СписокЗначений - Печатаемые объекты.
//       Значение - Ссылка на объект.
//       Представление - Имя области в которой был выведен объект (выходной параметр).
//   ПараметрыВывода - Структура - Дополнительные параметры сформированных табличных документов (выходной параметр).
//
Процедура Печать(МассивОбъектов, ПараметрыПечати, КоллекцияПечатныхФорм, ОбъектыПечати, ПараметрыВывода) Экспорт
	ПолноеИмя = Создать().Метаданные().ПолноеИмя();
	
	ПечатнаяФорма = УправлениеПечатью.СведенияОПечатнойФорме(КоллекцияПечатныхФорм, "СчетВПФ");
	Если ПечатнаяФорма <> Неопределено Тогда
		ПечатнаяФорма.ТабличныйДокумент = ПечатьСчетаЗаказа(МассивОбъектов, ОбъектыПечати, ПолноеИмя, "Счет");
		ПечатнаяФорма.СинонимМакета = НСтр("ru = 'Счет на оплату (подключенная печатная форма)'");
		ПечатнаяФорма.ПолныйПутьКМакету = ПолноеИмя + ".ПФ_MXL_СчетЗаказ";
	КонецЕсли;
	
	ПечатнаяФорма = УправлениеПечатью.СведенияОПечатнойФорме(КоллекцияПечатныхФорм, "ЗаказВПФ");
	Если ПечатнаяФорма <> Неопределено Тогда
		ПечатнаяФорма.ТабличныйДокумент = ПечатьСчетаЗаказа(МассивОбъектов, ОбъектыПечати, ПолноеИмя, "Заказ");
		ПечатнаяФорма.СинонимМакета = НСтр("ru = 'Заказ покупателя (подключенная печатная форма)'");
		ПечатнаяФорма.ПолныйПутьКМакету = ПолноеИмя + ".ПФ_MXL_СчетЗаказ";
	КонецЕсли;
	
	ПечатнаяФорма = УправлениеПечатью.СведенияОПечатнойФорме(КоллекцияПечатныхФорм, "ГарантийноеПисьмоВПФ");
	Если ПечатнаяФорма <> Неопределено Тогда
		ПечатнаяФорма.ТабличныйДокумент = ПечатьГарантийногоПисьма(МассивОбъектов, ОбъектыПечати, ПолноеИмя);
		ПечатнаяФорма.СинонимМакета = НСтр("ru = 'Гарантийное письмо (подключенная печатная форма)'");
		ПечатнаяФорма.ПолныйПутьКМакету = ПолноеИмя + ".ПФ_MXL_ГарантийноеПисьмо";
	КонецЕсли;
	
	Документы._ДемоСчетНаОплатуПокупателю.ЗаполнитьПараметрыОтправки(ПараметрыВывода.ПараметрыОтправки, МассивОбъектов, КоллекцияПечатныхФорм);
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

// Процедура печати документа.
//
Функция ПечатьСчетаЗаказа(МассивОбъектов, ОбъектыПечати, ПолноеИмя, ИмяМакета = "Счет") Экспорт
	
	ТекстЗапроса = 
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	СчетНаОплатуПокупателю.Ссылка КАК Ссылка,
	|	СчетНаОплатуПокупателю.Номер КАК Номер,
	|	СчетНаОплатуПокупателю.Дата КАК Дата,
	|	СчетНаОплатуПокупателю.СуммаВключаетНДС КАК СуммаВключаетНДС,
	|	СчетНаОплатуПокупателю.ВалютаДокумента КАК ВалютаДокумента,
	|	СчетНаОплатуПокупателю.Дата КАК ДатаДокумента,
	|	СчетНаОплатуПокупателю.БанковскийСчет КАК БанковскийСчет,
	|	СчетНаОплатуПокупателю.Контрагент КАК Контрагент,
	|	СчетНаОплатуПокупателю.Организация КАК Организация,
	|	СчетНаОплатуПокупателю.Товары.(
	|		Номенклатура.Наименование КАК Товар,
	|		Цена КАК Цена,
	|		Сумма КАК Сумма,
	|		СуммаНДС КАК СуммаНДС,
	|		Количество КАК Количество,
	|		НомерСтроки,
	|		Номенклатура
	|	),
	|	ВЫБОР
	|		КОГДА БанковскийСчетКонтрагента.РучноеИзменениеРеквизитовБанка
	|			ТОГДА БанковскийСчетКонтрагента.БИКБанка
	|		ИНАЧЕ КлассификаторБанков.Код
	|	КОНЕЦ КАК БИКБанк,
	|	ВЫБОР
	|		КОГДА БанковскийСчетКонтрагента.РучноеИзменениеРеквизитовБанка
	|			ТОГДА БанковскийСчетКонтрагента.НаименованиеБанка
	|		ИНАЧЕ КлассификаторБанков.Наименование
	|	КОНЕЦ КАК НаименованиеБанка,
	|	ВЫБОР
	|		КОГДА БанковскийСчетКонтрагента.РучноеИзменениеРеквизитовБанка
	|			ТОГДА БанковскийСчетКонтрагента.КоррСчетБанка
	|		ИНАЧЕ КлассификаторБанков.КоррСчет
	|	КОНЕЦ КАК КоррСчетБанка,
	|	ВЫБОР
	|		КОГДА БанковскийСчетКонтрагента.РучноеИзменениеРеквизитовБанка
	|			ТОГДА БанковскийСчетКонтрагента.ГородБанка
	|		ИНАЧЕ КлассификаторБанков.Город
	|	КОНЕЦ КАК ГородБанка,
	|	ВЫБОР
	|		КОГДА БанковскийСчетКонтрагента.РучноеИзменениеРеквизитовБанкаДляРасчетов
	|			ТОГДА БанковскийСчетКонтрагента.БИКБанкаДляРасчетов
	|		ИНАЧЕ КлассификаторБанковКорреспондентовРФ.Код
	|	КОНЕЦ КАК БИКБанкаДляРасчетов,
	|	ВЫБОР
	|		КОГДА БанковскийСчетКонтрагента.РучноеИзменениеРеквизитовБанкаДляРасчетов
	|			ТОГДА БанковскийСчетКонтрагента.НаименованиеБанкаДляРасчетов
	|		ИНАЧЕ КлассификаторБанковКорреспондентовРФ.Наименование
	|	КОНЕЦ КАК НаименованиеБанкаДляРасчетов,
	|	ВЫБОР
	|		КОГДА БанковскийСчетКонтрагента.РучноеИзменениеРеквизитовБанкаДляРасчетов
	|			ТОГДА БанковскийСчетКонтрагента.КоррСчетБанкаДляРасчетов
	|		ИНАЧЕ КлассификаторБанковКорреспондентовРФ.КоррСчет
	|	КОНЕЦ КАК КоррСчетБанкаДляРасчетов,
	|	ВЫБОР
	|		КОГДА БанковскийСчетКонтрагента.РучноеИзменениеРеквизитовБанкаДляРасчетов
	|			ТОГДА БанковскийСчетКонтрагента.ГородБанкаДляРасчетов
	|		ИНАЧЕ КлассификаторБанковКорреспондентовРФ.Город
	|	КОНЕЦ КАК ГородБанкаДляРасчетов,
	|	СчетНаОплатуПокупателю.Контрагент.НаименованиеПолное КАК ПолучательНаименованиеПолное,
	|	БанковскийСчетКонтрагента.НомерСчета КАК ПолучательНомерСчета
	|ИЗ
	|	Документ._ДемоСчетНаОплатуПокупателю КАК СчетНаОплатуПокупателю
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.КлассификаторБанков КАК КлассификаторБанков
	|		ПО СчетНаОплатуПокупателю.БанковскийСчет.Банк = КлассификаторБанков.Ссылка
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.КлассификаторБанков КАК КлассификаторБанковКорреспондентовРФ
	|		ПО СчетНаОплатуПокупателю.БанковскийСчет.БанкДляРасчетов = КлассификаторБанковКорреспондентовРФ.Ссылка
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник._ДемоБанковскиеСчета КАК БанковскийСчетКонтрагента
	|		ПО СчетНаОплатуПокупателю.БанковскийСчет = БанковскийСчетКонтрагента.Ссылка
	|ГДЕ
	|	СчетНаОплатуПокупателю.Ссылка В(&МассивОбъектов)
	|
	|УПОРЯДОЧИТЬ ПО
	|	СчетНаОплатуПокупателю.МоментВремени";
	
	Запрос = Новый Запрос(ТекстЗапроса);
	Запрос.УстановитьПараметр("МассивОбъектов", МассивОбъектов);
	
	Шапка = Запрос.Выполнить().Выбрать();
	
	ТабличныйДокумент = Новый ТабличныйДокумент;
	ТабличныйДокумент.КлючПараметровПечати = "СчетНаОплату_СчетЗаказ";
	
	Макет = УправлениеПечатью.МакетПечатнойФормы(ПолноеИмя + ".ПФ_MXL_СчетЗаказ");
	
	Пока Шапка.Следующий() Цикл
		
		КонтактнаяИнформация = КонтактнаяИнформацияДляСчета(Шапка.Организация, Шапка.Дата);
		
		Если ТабличныйДокумент.ВысотаТаблицы > 0 Тогда
			ТабличныйДокумент.ВывестиГоризонтальныйРазделительСтраниц();
		КонецЕсли;
		
		НомерСтрокиНачало = ТабличныйДокумент.ВысотаТаблицы + 1;
		
		ДанныеПечати = Новый Структура;
		
		ДанныеПечати.Вставить("ИНН", "0000000000");
		ДанныеПечати.Вставить("КПП", "000000000");
		
		Если ПустаяСтрока(Шапка.БИКБанкаДляРасчетов) Тогда
			ДанныеПечати.Вставить("БанкПолучателяПредставление", СокрЛП(Шапка.НаименованиеБанка) + " " + СокрЛП(Шапка.ГородБанка));
			ДанныеПечати.Вставить("ПредставлениеПоставщика", СокрЛП(Шапка.ПолучательНаименованиеПолное));
			ДанныеПечати.Вставить("БИКБанкаПолучателя", СокрЛП(Шапка.БИКБанк));
			ДанныеПечати.Вставить("СчетБанкаПолучателяПредставление", СокрЛП(Шапка.КоррСчетБанка));
			ДанныеПечати.Вставить("СчетПолучателяПредставление", СокрЛП(Шапка.ПолучательНомерСчета));
		Иначе
			ДанныеПечати.Вставить("БанкПолучателяПредставление", СокрЛП(Шапка.НаименованиеБанкаДляРасчетов) + " " 
			+ СокрЛП(Шапка.ГородБанкаДляРасчетов));
			ДанныеПечати.Вставить("ПредставлениеПоставщика", 
			СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			НСтр("ru = '%1 р/с %2 в %3'"),
			СокрЛП(Шапка.ПолучательНаименованиеПолное),
			СокрЛП(Шапка.ПолучательНомерСчета),
			СокрЛП(Шапка.ГородБанка)));
			ДанныеПечати.Вставить("БИКБанкаПолучателя", СокрЛП(Шапка.БИКБанкаДляРасчетов));
			ДанныеПечати.Вставить("СчетБанкаПолучателяПредставление", СокрЛП(Шапка.КоррСчетБанкаДляРасчетов));
			ДанныеПечати.Вставить("СчетПолучателяПредставление", СокрЛП(Шапка.КоррСчетБанка));
		КонецЕсли;	
		
		ТекстЗаголовка = СформироватьЗаголовокДокумента(
		Шапка, ?(ИмяМакета = "Счет", 
		НСтр("ru = 'Демо: Счет на оплату'"),
		НСтр("ru = 'Демо: Заказ покупателя'")));
		ДанныеПечати.Вставить("ТекстЗаголовка", ТекстЗаголовка);
		ДанныеПечати.Вставить("Поставщик", Строка(Шапка.Организация) + " " + КонтактнаяИнформация.ЮридическийАдрес);
		ДанныеПечати.Вставить("ПредставлениеПоставщика", Строка(Шапка.Организация) + " " + КонтактнаяИнформация.ЮридическийАдрес);
		ДанныеПечати.Вставить("Получатель", Шапка.Контрагент );
		ДанныеПечати.Вставить("ПредставлениеПолучателя", Шапка.Контрагент );
		
		ТаблицаТовары = Шапка.Товары.Выгрузить();
		ДанныеПечати.Вставить("Всего", ТаблицаТовары.Итог("Сумма"));
		ДанныеПечати.Вставить("ВсегоНДС", ТаблицаТовары.Итог("СуммаНДС"));
		
		ДанныеПечати.Вставить("ИтоговаяСумма", ДанныеПечати.Всего + ?(Шапка.СуммаВключаетНДС, 0, ДанныеПечати.ВсегоНДС));
		ДанныеПечати.Вставить("СуммаПрописью", ЧислоПрописью(ДанныеПечати.ИтоговаяСумма, , 
		Шапка.ВалютаДокумента.ПараметрыПрописи));
		ДанныеПечати.Вставить("ИтоговаяСтрока", 
		СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
		НСтр("ru = 'Всего наименований %1, на сумму %2'"),
		Формат(ТаблицаТовары.Количество(), "ЧН=0; ЧГ=0"),
		ДанныеПечати.СуммаПрописью));
		ДанныеПечати.Вставить("НДС", ?(Шапка.СуммаВключаетНДС, НСтр("ru = 'В том числе НДС:'"), НСтр("ru = 'Сумма НДС:'")));
		
		ДанныеПечати.Вставить("ФИОРуководителя", НСтр("ru = 'Иванов'"));
		ДанныеПечати.Вставить("ФИОБухгалтера",   НСтр("ru = 'Петрова'"));
		
		МассивОбластейМакета = Новый Массив;
		
		Если ИмяМакета = "Счет" Тогда
			МассивОбластейМакета.Добавить("ЗаголовокСчета");
		КонецЕсли;
		МассивОбластейМакета.Добавить("Заголовок");
		МассивОбластейМакета.Добавить("Поставщик");
		МассивОбластейМакета.Добавить("Покупатель");
		МассивОбластейМакета.Добавить("ШапкаТаблицы");
		МассивОбластейМакета.Добавить("Строка");
		МассивОбластейМакета.Добавить("Итого");
		МассивОбластейМакета.Добавить("ИтогоНДС");
		МассивОбластейМакета.Добавить("СуммаПрописью");
		МассивОбластейМакета.Добавить("ПодвалСчета");
		
		Для Каждого ИмяОбласти Из МассивОбластейМакета Цикл
			ОбластьМакета = Макет.ПолучитьОбласть(ИмяОбласти);
			Если ИмяОбласти <> "Строка" Тогда
				ЗаполнитьЗначенияСвойств(ОбластьМакета.Параметры, ДанныеПечати);
				ТабличныйДокумент.Вывести(ОбластьМакета);
			Иначе
				Для Каждого СтрокаТаблицы Из ТаблицаТовары Цикл
					ОбластьМакета.Параметры.Заполнить(СтрокаТаблицы);
					ТабличныйДокумент.Вывести(ОбластьМакета);
				КонецЦикла;
			КонецЕсли;
		КонецЦикла;
		
		УправлениеПечатью.ЗадатьОбластьПечатиДокумента(ТабличныйДокумент, НомерСтрокиНачало, ОбъектыПечати, Шапка.Ссылка);
		
	КонецЦикла;
	
	Возврат ТабличныйДокумент;
	
КонецФункции

// Для демонстрации обращения к внешней печатной форме.
Функция ПечатьГарантийногоПисьма(МассивОбъектов, ОбъектыПечати, ПолноеИмя) Экспорт
	
	ТекстЗапроса = 
	"ВЫБРАТЬ
	|	_ДемоСчетНаОплатуПокупателю.Ссылка КАК Ссылка,
	|	_ДемоСчетНаОплатуПокупателю.Номер КАК Номер,
	|	_ДемоСчетНаОплатуПокупателю.Дата КАК Дата,
	|	_ДемоСчетНаОплатуПокупателю.Организация КАК Организация,
	|	_ДемоСчетНаОплатуПокупателю.Контрагент КАК Контрагент,
	|	_ДемоСчетНаОплатуПокупателю.СуммаОплаты КАК СуммаОплаты,
	|	ДОБАВИТЬКДАТЕ(_ДемоСчетНаОплатуПокупателю.Дата, ДЕНЬ, 5) КАК СрокОплаты
	|ИЗ
	|	Документ._ДемоСчетНаОплатуПокупателю КАК _ДемоСчетНаОплатуПокупателю
	|ГДЕ
	|	_ДемоСчетНаОплатуПокупателю.Ссылка В(&МассивОбъектов)
	|
	|УПОРЯДОЧИТЬ ПО
	|	_ДемоСчетНаОплатуПокупателю.МоментВремени";
	
	Запрос = Новый Запрос(ТекстЗапроса);
	Запрос.УстановитьПараметр("МассивОбъектов", МассивОбъектов);
	
	Выборка = Запрос.Выполнить().Выбрать();
	
	ТабличныйДокумент = Новый ТабличныйДокумент;
	ТабличныйДокумент.КлючПараметровПечати = "СчетНаОплату_ГарантийноеПисьмо";
	
	Макет = УправлениеПечатью.МакетПечатнойФормы(ПолноеИмя + ".ПФ_MXL_ГарантийноеПисьмо");
	
	Пока Выборка.Следующий() Цикл
		Если ТабличныйДокумент.ВысотаТаблицы > 0 Тогда
			ТабличныйДокумент.ВывестиГоризонтальныйРазделительСтраниц();
		КонецЕсли;
		
		НомерСтрокиНачало = ТабличныйДокумент.ВысотаТаблицы + 1;
		
		СрокОплаты = УправлениеСвойствами.ЗначениеСвойства(Выборка.Ссылка, "СрокОплатыСчета");
		Если СрокОплаты = Неопределено Тогда
			СрокОплаты = Выборка.СрокОплаты;
		КонецЕсли;
		
		ОбластьМакета = Макет.ПолучитьОбласть("ТекстПисьма");
		ЗаполнитьЗначенияСвойств(ОбластьМакета.Параметры, Выборка);
		ОбластьМакета.Параметры.СрокОплаты = Формат(СрокОплаты, "ДЛФ=DD");
		ОбластьМакета.Параметры.ПредставлениеЗаявки = СформироватьЗаголовокДокумента(Выборка, "");
		ТабличныйДокумент.Вывести(ОбластьМакета);
		
		УправлениеПечатью.ЗадатьОбластьПечатиДокумента(ТабличныйДокумент, НомерСтрокиНачало, ОбъектыПечати, Выборка.Ссылка);
		
	КонецЦикла;
	
	Возврат ТабличныйДокумент;
	
КонецФункции

// Возвращает заголовок документа для печатной формы.
//
// Параметры:
//  Шапка - любая структура с полями:
//           Номер         - Строка или Число - номер документа;
//           Дата          - Дата - дата документа;
//           Представление - Строка - (необязательный) платформенное представление ссылки на документ.
//                                    Если параметр НазваниеДокумента не задан, то название документа будет вычисляться
//                                    из этого параметра.
//  НазваниеДокумента - Строка - название документа (например, "Счет на оплату").
//
// Возвращаемое значение:
//  Строка - заголовок документа.
//
Функция СформироватьЗаголовокДокумента(Шапка, Знач НазваниеДокумента = "")
	
	ДанныеДокумента = Новый Структура("Номер,Дата,Представление");
	ЗаполнитьЗначенияСвойств(ДанныеДокумента, Шапка);
	
	// Если название документа не передано, получим название по представлению документа.
	Если ПустаяСтрока(НазваниеДокумента) И ЗначениеЗаполнено(ДанныеДокумента.Представление) Тогда
		ПоложениеНомера = СтрНайти(ДанныеДокумента.Представление, ДанныеДокумента.Номер);
		Если ПоложениеНомера > 0 Тогда
			НазваниеДокумента = СокрЛП(Лев(ДанныеДокумента.Представление, ПоложениеНомера - 1));
		КонецЕсли;
	КонецЕсли;

	НомерНаПечать = ПрефиксацияОбъектовКлиентСервер.НомерНаПечать(ДанныеДокумента.Номер);
	Возврат СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru = '%1 № %2 от %3'"),
		НазваниеДокумента, НомерНаПечать, Формат(ДанныеДокумента.Дата, "ДЛФ=DD"));
	
КонецФункции

Функция КонтактнаяИнформацияДляСчета(Организация, Дата)
	
	Перем ГородНаселенныйПункт, МассивВидовКИ, МассивОбъектовКИ, Сведения, СтрокаТаблицыКИ, СтруктураПолейАдреса, ТаблицаКИ;
	
	МассивОбъектовКИ = Новый Массив;
	МассивОбъектовКИ.Добавить(Организация);
	
	МассивВидовКИ = Новый Массив;
	МассивВидовКИ.Добавить(Справочники.ВидыКонтактнойИнформации._ДемоЮридическийАдресОрганизации);
	Сведения = СведенияКонтактнойИнформации();
	
	ТаблицаКИ = УправлениеКонтактнойИнформацией.КонтактнаяИнформацияОбъектов(МассивОбъектовКИ, Неопределено, МассивВидовКИ, Дата);
	Для Каждого СтрокаТаблицыКИ Из ТаблицаКИ Цикл
		
		// Определяем нижний уровень населенного пункта в адресе.
		ГородНаселенныйПункт = "";
		Если СтрокаТаблицыКИ.Тип = Перечисления.ТипыКонтактнойИнформации.Адрес Тогда
			СтруктураПолейАдреса = УправлениеКонтактнойИнформацией.ПредыдущаяСтруктураКонтактнойИнформацииXML(
			СтрокаТаблицыКИ.ЗначенияПолей, СтрокаТаблицыКИ.Вид);
			
			Если СтруктураПолейАдреса.Свойство("Город") 
				И ЗначениеЗаполнено(СтруктураПолейАдреса.Город) Тогда
				ГородНаселенныйПункт = СтруктураПолейАдреса.Город;
				
			ИначеЕсли СтруктураПолейАдреса.Свойство("НаселенныйПункт") 
				И ЗначениеЗаполнено(СтруктураПолейАдреса.НаселенныйПункт) Тогда
				ГородНаселенныйПункт = СтруктураПолейАдреса.НаселенныйПункт;
				
			ИначеЕсли СтруктураПолейАдреса.Свойство("КодРегиона")
				И СтруктураПолейАдреса.Свойство("Регион")
				И (СтруктураПолейАдреса.КодРегиона =  "77" // Москва
				ИЛИ СтруктураПолейАдреса.КодРегиона = "78" // Санкт-Петербург
				ИЛИ СтруктураПолейАдреса.КодРегиона = "92" // Севастополь и Байконур
				ИЛИ СтруктураПолейАдреса.КодРегиона = "99") Тогда
				// Города федерального значения и приравненные к ним.
					ГородНаселенныйПункт = СтруктураПолейАдреса.Регион;
			КонецЕсли;
		КонецЕсли;
		
		Если СтрокаТаблицыКИ.Вид = Справочники.ВидыКонтактнойИнформации._ДемоЮридическийАдресОрганизации Тогда
			Сведения.ЮридическийАдрес = СтрокаТаблицыКИ.Представление;
			Сведения.ГородПоЮридическомуАдресу = ГородНаселенныйПункт;
			Сведения.ЮридическийАдрес = СтрокаТаблицыКИ.Представление;
			Сведения.ЗначенияПолейЮридическийАдрес = СтрокаТаблицыКИ.ЗначенияПолей;
			Сведения.ГородПоЮридическомуАдресу = ГородНаселенныйПункт;
		КонецЕсли;
		
	КонецЦикла;
	
	Возврат Сведения;
КонецФункции

Функция СведенияКонтактнойИнформации()
	Сведения = Новый Структура;
	Сведения.Вставить("ЮридическийАдрес", "");
	Сведения.Вставить("ГородПоЮридическомуАдресу", "");
	Сведения.Вставить("ЮридическийАдрес", "");
	Сведения.Вставить("ЗначенияПолейЮридическийАдрес", "");
	Сведения.Вставить("ГородПоЮридическомуАдресу", "");
	
	Возврат Сведения;
КонецФункции

#КонецОбласти

#КонецЕсли